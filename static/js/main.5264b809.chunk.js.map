{"version":3,"sources":["components/Header/index.js","components/ImageGrid/ImageGridRedux/actionTypes.js","components/ImageGrid/ImageGridRedux/actions.js","components/Button/index.js","components/Stats/index.js","components/ImageGrid/index.js","components/ImageGrid/ImageGridRedux/reducers.js","store/rootReducer.js","config/index.js","components/ImageGrid/ImageGridRedux/api.js","components/ImageGrid/ImageGridRedux/imageSaga.js","components/ImageGrid/ImageGridRedux/statsSaga.js","store/rootSaga.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["Header","IMAGES","LOAD","LOAD_SUCCESS","LOAD_FAIL","STATS","setImages","images","type","setError","error","loadImagesStats","id","setImagesStats","download","setErrorStats","Button","children","loading","props","className","disabled","defaultProps","Stats","stats","isLoading","ImageGrid","this","loadImages","imageStats","map","image","key","Math","ceil","height","width","src","urls","small","alt","user","username","onClick","Component","connect","dispatch","rootReducer","combineReducers","state","action","nextPage","URL","fetchImages","page","a","fetch","response","json","data","status","Error","errors","fetchImageStats","handleImagesLoad","watchImagesLoad","getPage","select","call","put","toString","takeEvery","handleStatsRequest","watchStatsRequest","i","res","downloads","total","take","length","fork","rootSaga","all","imageSaga","statsSaga","store","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","configureStore","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sVASeA,G,MANA,WACd,OAAO,sDCJFC,EAAS,CACdC,KAAM,cACNC,aAAc,sBACdC,UAAW,oBAGNC,EACC,aADDA,EAES,qBAFTA,EAGM,kBCFNC,EAAY,SAAAC,GAAM,MAAK,CAC5BC,KAAMP,EAAOE,aACbI,WAGKE,EAAW,SAAAC,GAAK,MAAK,CAC1BF,KAAMP,EAAOG,UACbM,UAIKC,EAAkB,SAAAC,GAAE,MAAI,CAC7BJ,KAAMH,EACNO,OAGKC,EAAiB,SAACD,EAAIE,GAAL,MAAkB,CACxCN,KAAKH,EACLO,KACAE,aAGKC,EAAgB,SAAAH,GAAE,MAAI,CAC3BJ,KAAMH,EACNO,O,QC5BKI,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAYC,EAAzB,6CACb,0CAAQC,UAAU,SAASC,SAAUH,GAAaC,GAC/CD,EAAU,aAAaD,KAI5BD,EAAOM,aAAe,CACpBJ,SAAQ,GAGKF,QCIAO,G,MAdD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OAAIA,EAKF,0BAAMJ,UAAU,SACbI,EAAMd,OAAS,sBACfc,EAAMC,WAAa,0BACA,OAAnBD,EAAMV,UAAN,uBAAiCU,EAAMV,WANnC,0BAAMM,UAAU,SAAhB,gBCCLM,G,kMAGJC,KAAKR,MAAMS,e,+BAGF,IAAD,EACoDD,KAAKR,MAAzDZ,EADA,EACAA,OAAQG,EADR,EACQA,MAAOe,EADf,EACeA,UAAWG,EAD1B,EAC0BA,WAAYC,EADtC,EACsCA,WAC9C,OACC,yBAAKT,UAAY,WAChB,6BAASA,UAAY,gBAClBb,EAAOuB,KAAI,SAAAC,GAAK,OACjB,yBACAC,IAAKD,EAAMnB,GACXQ,UAAS,kCAA6Ba,KAAKC,KAC1CH,EAAMI,OAASJ,EAAMK,SAErB,kBAAC,EAAD,CAAOZ,MAAOK,EAAWE,EAAMnB,MAC/B,yBACCyB,IAAKN,EAAMO,KAAKC,MAChBC,IAAKT,EAAMU,KAAKC,gBAKnBhC,GAAS,yBAAKU,UAAU,SAAS,2CAClC,kBAAC,EAAD,CACCuB,QAAS,kBAAMlB,GAAaG,KAC5BV,QAASO,GAFV,sB,GA1BoBmB,cAgDTC,eAXQ,SAAC,GAAD,MAA6C,CAClEpB,UADqB,EAAGA,UAExBlB,OAFqB,EAAcA,OAGpCG,MAHsB,EAAsBA,MAI5CmB,WAJsB,EAA6BA,eAOzB,SAAAiB,GAAQ,MAAK,CACvClB,WAAY,kBAAMkB,EHjDO,CACzBtC,KAAMP,EAAOC,WGmDC2C,CAGbnB,G,wlBCxDF,ICaeqB,EARKC,YAAgB,CACnCvB,UDCsB,WAA4B,IAA3BwB,EAA0B,wDAAXC,EAAW,uCAChD,OAAQA,EAAO1C,MACf,KAAKP,EAAOC,KACX,OAAO,EACR,KAAKD,EAAOE,aAEZ,KAAKF,EAAOG,UACX,OAAO,EACR,QACC,OAAO6C,ICTT1C,ODPqB,WAAyB,IAAxB0C,EAAuB,uDAAf,GAAIC,EAAW,uCAC7C,OAAIA,EAAO1C,OAASP,EAAOE,aACpB,GAAN,mBAAW8C,GAAX,YAAqBC,EAAO3C,SAEtB0C,GCIPvC,MDYoB,WAA2B,IAA1BuC,EAAyB,uDAAjB,KAAMC,EAAW,uCAC7C,OAAQA,EAAO1C,MACf,KAAKP,EAAOG,UACX,OAAO8C,EAAOxC,MACf,KAAKT,EAAOC,KACZ,KAAKD,EAAOE,aACX,OAAO,KACR,QACC,OAAO8C,ICnBTE,SDuBmB,WAAwB,IAAvBF,EAAsB,uDAAd,EAAGC,EAAW,uCAC1C,OAAQA,EAAO1C,MACd,KAAKP,EAAOE,aACX,OAAO8C,EAAO,EACf,QACC,OAAOA,IC3BTpB,WD+BoB,WAAuB,IAAtBoB,EAAqB,uDAAb,GAAIC,EAAS,uCACzC,OAAQA,EAAO1C,MACb,KAAKH,EACH,OAAO,EAAP,GACK4C,EADL,eAEGC,EAAOtC,GAAI,CACVa,WAAU,EACVX,SAAS,KACTJ,OAAM,KAGZ,KAAKL,EACH,OAAO,EAAP,GACK4C,EADL,eAEGC,EAAOtC,GAAI,CACVa,WAAU,EACVX,SAASoC,EAAOpC,SAChBJ,OAAM,KAGZ,KAAKL,EACH,OAAO,EAAP,GACK4C,EADL,eAEGC,EAAOtC,GAAI,CACVa,WAAU,EACVX,SAAS,KACTJ,OAAO,KAGb,QACE,OAAOuC,M,+BEtEEjB,EAFH,8ECANoB,EAAG,mCAEHC,EAAW,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEACIC,MAAM,GAAD,OAAIJ,GAAJ,OAAUpB,EAAV,4BAAiCsB,IAD1C,cACbG,EADa,gBAEAA,EAASC,OAFT,UAEbC,EAFa,SAGfF,EAASG,QAAU,KAHJ,sBAIZ,IAAIC,MAAMF,EAAKG,QAJH,gCAMZH,GANY,2CAAH,sDASXI,EAAe,uCAAG,WAAMnD,GAAN,iBAAA2C,EAAA,sEACAC,MAAM,GAAD,OAAIJ,EAAJ,YAAWxC,EAAX,sBAA2BoB,IADhC,cACjByB,EADiB,gBAEJA,EAASC,OAFL,UAEjBC,EAFiB,SAGpBF,EAASG,QAAQ,KAHG,sBAIhB,IAAIC,MAAMF,EAAKG,QAJC,gCAMhBH,GANgB,2CAAH,sD,WCLXK,G,WAYeC,GAdZC,EAAU,SAAAjB,GAAK,OAAIA,EAAME,UAEtC,SAAUa,IAAV,yEAEe,OAFf,kBAEqBG,YAAOD,GAF5B,OAGmB,OADXZ,EAFR,gBAGyBc,YAAKf,EAAaC,GAH3C,OAII,OADM/C,EAHV,gBAIU8D,YAAI/D,EAAUC,IAJxB,+BAOI,OAPJ,oCAOU8D,YAAI5D,EAAS,KAAM6D,aAP7B,sDAYe,SAAUL,IAAV,iEACd,OADc,SACRM,YAAUtE,EAAOC,KAAM8D,GADf,uC,eCdLQ,G,WAYeC,GAZzB,SAAUD,EAAmB5D,GAA7B,yEACW8D,EAAE,EADb,YACgBA,EAAE,GADlB,iBAGM,OAHN,kBAGYL,YAAI1D,EAAgBC,IAHhC,OAIkB,OAJlB,SAIwBwD,YAAKL,EAAiBnD,GAJ9C,OAKM,OADM+D,EAJZ,iBAKYN,YAAIxD,EAAeD,EAAI+D,EAAIC,UAAUC,QALjD,kCAMa,GANb,0CACqBH,IADrB,uBASE,OATF,UASQL,YAAItD,EAAcH,IAT1B,sDAYe,SAAU6D,IAAV,2EAEM,OAFN,SAEYK,YAAK7E,EAAOE,cAFxB,gBAEJI,EAFI,EAEJA,OACEmE,EAAE,EAHA,YAGGA,EAAEnE,EAAOwE,QAHZ,iBAIT,OAJS,SAIHC,YAAKR,EAAoBjE,EAAOmE,GAAG9D,IAJhC,OAGoB8D,IAHpB,8E,eCbUO,IAAV,SAAUA,KAAV,iEACb,OADa,SACPC,YAAI,CACRC,IACAC,MAHW,uCCCf,ICCMC,GDDiB,WACrB,IAAMC,EAAiBC,cACjBF,EAAQG,YACZzC,EACA0C,YACEC,YAAgBJ,GAChBK,OAAOC,8BACLD,OAAOC,iCAId,OADCN,EAAeO,IAAIZ,IACbI,ECVMS,GAaCC,G,iLATX,OACE,kBAAC,IAAD,CAAUV,MAASA,IACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUzC,aCIEoD,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5264b809.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.scss'\n\nconst Header = () => {\n\treturn <header>\n    What the Splash!\n  </header>\n}\n\nexport default Header;\n","const IMAGES = {\n\tLOAD: 'IMAGES_LOAD',\n\tLOAD_SUCCESS: 'IMAGES_LOAD_SUCCESS',\n\tLOAD_FAIL: 'IMAGES_LOAD_FAIL',\n}\n\nconst STATS = {\n\tLOAD: 'STATS_LOAD',\n\tLOAD_SUCCESS: 'STATS_LOAD_SUCCESS',\n\tLOAD_FAIL: 'STATS_LOAD_FAIL',\n}\n\nexport { IMAGES, STATS };\n","import { IMAGES, STATS } from './actionTypes';\n\n// Actions para carga de im치genes\nconst loadImages = () => ({\n\ttype: IMAGES.LOAD,\n});\n\nconst setImages = images => ({\n\ttype: IMAGES.LOAD_SUCCESS,\n\timages,\n});\n\nconst setError = error => ({\n\ttype: IMAGES.LOAD_FAIL,\n\terror,\n});\n\n// Actions para estadistica de las imagenes\nconst loadImagesStats = id =>({\n\ttype: STATS.LOAD,\n\tid,\n})\n\nconst setImagesStats = (id, download) =>({\n\ttype:STATS.LOAD_SUCCESS,\n\tid,\n\tdownload,\n})\n\nconst setErrorStats = id =>({\n\ttype: STATS.LOAD_FAIL,\n\tid,\n})\n\nexport { \n\tloadImages, \n\tsetImages, \n\tsetError,\n\tloadImagesStats, \n\tsetImagesStats, \n\tsetErrorStats\n};\n","import React from 'react';\nimport './styles.scss';\n\nconst Button = ({ children, loading, ...props}) => (\n  <button className=\"button\" disabled={loading} {...props}> \n    {loading ? 'loading...':children}\n  </button>\n)\n\nButton.defaultProps = {\n  loading:false,\n}\n\nexport default Button;\n","import React from 'react';\nimport './styles.scss';\n\nconst Stats = ({ stats }) => {\n  if(!stats){\n    //loading not yet started\n    return <span className=\"stats\">Loading...</span>;\n  }\n  return(\n    <span className=\"stats\">\n      {stats.error && '游뱚 Error!'}\n      {stats.isLoading && '游뗷 Loading...'}\n      {stats.download !== null && `游뱆 ${stats.download}`}\n    </span>\n  );\n};\n\nexport default Stats;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { loadImages } from './ImageGridRedux/actions';\nimport Button from '../Button';\nimport Stats from '../Stats';\nimport './styles.scss';\n\nclass ImageGrid extends Component {\n\t//Funci칩n de React que carga las imagenes al acceder a la p치gina\n\tcomponentDidMount(){\n\t\tthis.props.loadImages();\n\t}\n\n\trender() {\n\t\tconst { images, error, isLoading, loadImages, imageStats} = this.props;\n\t\treturn (\n\t\t\t<div className = \"content\">\n\t\t\t\t<section className = \"content-grid\">\n\t\t\t\t\t{ images.map(image => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\tkey={image.id}\n\t\t\t\t\t\tclassName={`content-grid__item item-${Math.ceil(\n\t\t\t\t\t\t\timage.height / image.width,\n\t\t\t\t\t\t\t)}`}>\n\t\t\t\t\t\t\t<Stats stats={imageStats[image.id]}/>\n\t\t\t\t\t\t\t<img \n\t\t\t\t\t\t\t\tsrc={image.urls.small} \n\t\t\t\t\t\t\t\talt={image.user.username}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</section>\n\t\t\t\t{error && <div className=\"error\">{\"No es posible cargar m치s im치genes\"}</div>}\n\t\t\t\t<Button \n\t\t\t\t\tonClick={()=> !isLoading && loadImages()}\n\t\t\t\t\tloading={isLoading}\n\t\t\t\t>\n\t\t\t\t\tCargar m치s\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t) \n\t}\n}\n\nconst mapStateToProps =({ isLoading, images, error, imageStats })=>({\n  isLoading,\n  images, \n\terror,\n\timageStats,\n});\n\nconst mapDispatchToProps = dispatch => ({\n\tloadImages: () => dispatch(loadImages()),\n});\n\nexport default connect (\n  mapStateToProps,\n  mapDispatchToProps,\n)(ImageGrid);\n","import { IMAGES, STATS } from './actionTypes';\n\nconst imagesReducer = (state = [], action) => {\n\tif (action.type === IMAGES.LOAD_SUCCESS) {\n\t\treturn [...state, ...action.images]\n\t}\n\treturn state;\n}\n\nconst loadingReducer = (state = false, action) => {\n  switch (action.type) {\n\t\tcase IMAGES.LOAD:\n\t\t\treturn true;\n\t\tcase IMAGES.LOAD_SUCCESS:\n\t\t\treturn false; \n\t\tcase IMAGES.LOAD_FAIL:\n\t\t\treturn false;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst errorReducer = (state = null, action) => {\n  switch (action.type) {\n\t\tcase IMAGES.LOAD_FAIL:\n\t\t\treturn action.error;\n\t\tcase IMAGES.LOAD:\n\t\tcase IMAGES.LOAD_SUCCESS:\n\t\t\treturn null;\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}\n\nconst pageReducer = (state = 1, action) => {\n\tswitch (action.type){\n\t\tcase IMAGES.LOAD_SUCCESS:\n\t\t\treturn state +1;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst statsReducer = (state = {}, action)=>{\n  switch (action.type){\n    case STATS.LOAD:\n      return {\n        ...state,\n        [action.id]:{\n          isLoading:true,\n          download:null, \n          error:false,\n        },\n      };\n    case STATS.LOAD_SUCCESS:\n      return {\n        ...state,\n        [action.id]:{\n          isLoading:false,\n          download:action.download,\n          error:false,\n        },\n      };\n    case STATS.LOAD_FAIL:\n      return {\n        ...state,\n        [action.id]:{\n          isLoading:false,\n          download:null,\n          error: true,\n        },\n      };\n    default:\n      return state\n  }\n}\n\nexport { \n\timagesReducer, \n\tloadingReducer, \n\terrorReducer, \n\tpageReducer,\n\tstatsReducer\n};\n","import { combineReducers } from 'redux';\nimport { imagesReducer, \n\tloadingReducer, \n\terrorReducer, \n\tpageReducer,\n  statsReducer } from '../components/ImageGrid/ImageGridRedux/reducers';\n\nconst rootReducer = combineReducers({\n\tisLoading: loadingReducer,\n\timages: imagesReducer,\n\terror: errorReducer,\n\tnextPage: pageReducer,\n\timageStats: statsReducer,\n});\n\nexport default rootReducer;\n","//Key Unsplash\nconst key = '?client_id=67ae24d3c5aa64e246df53247fe74bc8c2d0d476e92c7dcc889dda49f887310e';\n\nexport default key;\n\n\n","import key from '../../../config/index';\nconst URL = `https://api.unsplash.com/photos/`;\n\nconst fetchImages = async page => {\n\tconst response = await fetch(`${URL}${key}&per_page=3&page=${page}`);\n\tconst data = await response.json();\n\tif (response.status >= 400) {\n\t\tthrow new Error(data.errors);\n\t}\n\treturn data;\n};\n\nconst fetchImageStats = async id => {\n\tconst response = await fetch(`${URL}/${id}/statistics${key}`);\n\tconst data = await response.json();\n\tif(response.status>=400) {\n\t\tthrow new Error(data.errors);\n\t}\n\treturn data;\n}\n\nexport { fetchImages, fetchImageStats };\n","import { takeEvery, select, call, put} from 'redux-saga/effects';\nimport { IMAGES } from './actionTypes';\nimport { fetchImages } from './api';\nimport { setImages, setError } from './actions';\n\nexport const getPage = state => state.nextPage;\n\nfunction* handleImagesLoad(){\n\ttry{\n\t\tconst page = yield select(getPage);\n    const images = yield call(fetchImages, page);\n    yield put(setImages(images));\n\t}catch (error){\n    //dispatch error\n    yield put(setError(error.toString()))\n\t}\n\n}\n\nexport default function* watchImagesLoad(){\n\tyield takeEvery(IMAGES.LOAD, handleImagesLoad);\n}\n","import { take, fork, call, put } from 'redux-saga/effects'; \nimport { IMAGES } from './actionTypes';\nimport { fetchImageStats } from './api';\nimport { loadImagesStats, setImagesStats, setErrorStats } from './actions';\n\nfunction* handleStatsRequest(id){\n  for (let i=0; i<3; i++){\n    try{\n      yield put(loadImagesStats(id));\n      const res = yield call(fetchImageStats, id);\n      yield put(setImagesStats(id, res.downloads.total));\n      return true;\n    }catch (error){ }\n  }\n  yield put(setErrorStats(id));\n}\n\nexport default function* watchStatsRequest(){\n  while (true){\n    const {images} = yield take(IMAGES.LOAD_SUCCESS);\n    for (let i=0; i<images.length; i++){\n      yield fork(handleStatsRequest, images[i].id);\n    }\n  }\n}\n","import { all } from 'redux-saga/effects';\nimport imageSaga from '../components/ImageGrid/ImageGridRedux/imageSaga';\nimport statsSaga from '../components/ImageGrid/ImageGridRedux/statsSaga';\n\nexport default function* rootSaga(){\n  yield all([\n    imageSaga(),\n    statsSaga(),\n  ]);\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(sagaMiddleware),\n      window.__REDUX_DEVTOOLS_EXTENSION__&&\n        window.__REDUX_DEVTOOLS_EXTENSION__(),\n    ),\n  )\n  sagaMiddleware.run(rootSaga);\n\treturn store;\n}\n\nexport default configureStore;\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport Header from './components/Header';\nimport ImageGrid from './components/ImageGrid';\nimport configureStore from './store/store';\n\nconst store = configureStore();\n\nclass App extends Component {\n  render(){\n    return (\n      <Provider store = {store}>\n        <Header />\n        <ImageGrid />\n      </Provider >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}