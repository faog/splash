{"version":3,"sources":["components/Header/index.js","components/Grid/index.js","config/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","ImageGrid","state","images","fetch","then","res","json","setState","this","className","map","image","key","id","Math","ceil","height","width","src","urls","small","alt","user","username","Component","App","Fragment","Grid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gPASeA,G,YANA,WACd,OAAO,sD,mCCoCOC,G,iNAnCbC,MAAQ,CACRC,OAAQ,I,mFAIW,IAAD,OAClBC,MAAM,8CAAD,OCVK,mEDUL,iBACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAF,GACL,EAAKK,SAAS,CACbL,gB,+BAKO,IACDA,EAAWM,KAAKP,MAAhBC,OACR,OACC,yBAAKO,UAAY,WAChB,6BAASA,UAAY,gBAClBP,EAAOQ,KAAI,SAAAC,GAAK,OACjB,yBACAC,IAAKD,EAAME,GACXJ,UAAS,kCAA6BK,KAAKC,KAC1CJ,EAAMK,OAASL,EAAMM,SAEpB,yBAAKC,IAAKP,EAAMQ,KAAKC,MAAOC,IAAKV,EAAMW,KAAKC,qB,GA3B5BC,cESTC,EATH,WACV,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAACC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.ccf5d363.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.scss'\n\nconst Header = () => {\n\treturn <header>\n    What the Splash!\n  </header>\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport key from '../../config';\nimport './styles.scss';\n\nclass ImageGrid extends Component {\n  state = {\n\t\timages: [],\n\t};\n\n\t//Función de React que carga las imagenes al acceder a la página\n\tcomponentDidMount(){\n\t\tfetch(`https://api.unsplash.com/photos/?client_id=${key}&per_page=28`)\n\t\t.then(res => res.json())\n\t\t.then(images => {\n\t\t\tthis.setState({\n\t\t\t\timages,\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { images } = this.state;\n\t\treturn (\n\t\t\t<div className = \"content\">\n\t\t\t\t<section className = \"content-grid\">\n\t\t\t\t\t{ images.map(image => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\tkey={image.id}\n\t\t\t\t\t\tclassName={`content-grid__item item-${Math.ceil(\n\t\t\t\t\t\t\timage.height / image.width,\n\t\t\t\t\t\t\t)}`}>\n\t\t\t\t\t\t\t\t<img src={image.urls.small} alt={image.user.username}></img>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t) \n\t}\n}\n\nexport default ImageGrid;\n","//Key Unsplash\nconst key = '5f96323678d05ff0c4eb264ef184556868e303b32a2db88ecbf15746e6f25e02';\n\nexport default key;\n\n\n","import React from 'react';\nimport Header from './components/Header';\nimport Grid from './components/Grid';\n\nconst App = () =>{\n  return (\n    <React.Fragment>\n      <Header />\n      <Grid />\n    </React.Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}